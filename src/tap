{ pkgs, ... }:

pkgs.writers.writeBashBin "tap" ''

# -u: Treat unset variables and parameters other than the special parameters "@"
#     and "*" as an error when performing parameter expansion.  If expansion is
#     attempted on an unset variable or parameter, the shell prints an error
#     message, and, if not interactive, exits with a non-zero status.

# -o pipefail: If set, the return value of a pipeline is the value of the last
#              (rightmost) command to exit with a non-zero status, or zero if
#              all commands in the pipeline exit successfully.  This option is
#              disabled by default.

builtin set -u -o pipefail

# nullglob: If set, bash allows patterns which match no files to expand to a
#           null string, rather than themselves.
# dotglob:  If set, bash includes filenames beginning with a . in the results of
#           pathname expansion.
builtin shopt -s nullglob
builtin shopt -s dotglob

basename=${pkgs.coreutils}/bin/basename
false=${pkgs.coreutils}/bin/false
getopt=${pkgs.utillinux}/bin/getopt
true=${pkgs.coreutils}/bin/true

progname="$($basename "$0")"
verbose=$false
dry_run=$false

play=${pkgs.sox}/bin/play
less=${pkgs.less}/bin/less
sleep=${pkgs.coreutils}/bin/sleep

# ------------------------------------------------------------------------------

warn () {
  echo -e "$1" 1>&2
}

info () {
  if $verbose; then
    echo -e "$1" 1>&2
  fi
}

usage () {
  usage="$(cat <<EOF
usage: $progname OPTION* MUSIC-FILE[.mp3]

play the given .mp3, and less its associated .tab

options:
 -v | --verbose
 -n | --dry-run
 -h | --help
EOF
)"
  die 2 "$usage"
}

die() {
  warn "$2"
  exit $1
}

go() {
  exit="$1"; shift
  if $dry_run; then info "(CMD) $*"; else info "CMD> $*"; fi
  $dry_run || "$@" || die "$exit" "failed: $*"
}

# ------------------------------------------------------------------------------

OPTS=$( $getopt --options vhn                         \
                --longoptions verbose,dry-run,help    \
                --name "$progname" -- "$@"            )

[ $? -eq 0 ] || die 2 "options parsing failed (--help for help)"

# copy the values of OPTS (getopt quotes them) into the shell's $@
eval set -- "$OPTS"

while true; do
  case "$1" in
    -v | --verbose  ) verbose=$true ; shift   ;;
    -h | --help     ) usage                   ;;
    -n | --dry-run  ) dry_run=$true ; shift   ;;
    # !!! don't forget to update usage !!!
    -- ) shift; break ;;
    * ) break ;;
  esac
done

main() {
  base="''${1%.*}"
  tab="$base.tab"
  mp3="$base.mp3"

  [ -e "$tab" ] || die 3 "no such file: '$tab'"
  [ -e "$mp3" ] || die 4 "no such file: '$mp3'"

  { go 5 $sleep 2s && go 6 $play --no-show-progress "$mp3" ; } &
  go 7 $less "$tab"
}

case $# in
  0 ) usage ;;
  1 ) main "$1" ;;
  * ) usage ;;
esac
''

