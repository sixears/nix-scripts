{-# LANGUAGE ConstraintKinds   #-}
{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE LambdaCase        #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RankNTypes        #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE TupleSections     #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE UnicodeSyntax     #-}
{-# LANGUAGE ViewPatterns      #-}

-- XXX use of --verbose=info:{cshead^ioclasses=iocmdw,iocmdr}:/tmp/log
--     alias for ^^^ that just shows commands (no datestamp, etc.); optionally
--     to a file; optionally to an fd
import Base1T

-- base --------------------------------

import Data.Bool      ( bool )
import Data.Function  ( flip )
import Data.List      ( filter )
import Data.Maybe     ( catMaybes, fromJust, fromMaybe, isJust )

-- containers --------------------------

import qualified  Data.Map.Strict  as  Map
import qualified  Data.Set         as  Set

import Data.Map.Strict  ( (!?) )

-- domainnames -------------------------

import DomainNames.Hostname  ( Hostname, hostlocal )

-- exceptions --------------------------

import Control.Monad.Catch  ( MonadMask, bracket_ )

-- fpath -------------------------------

import FPath.Abs               ( Abs( AbsD ) )
import FPath.AbsDir            ( AbsDir, absdir, root )
import FPath.AbsFile           ( AbsFile )
import FPath.AppendableFPath   ( (‚´ª) )
import FPath.Basename          ( basename )
import FPath.Error.FPathError  ( AsFPathError )
import FPath.Parseable         ( parse )
import FPath.RelDir            ( RelDir, reldir )
import FPath.RelFile           ( RelFile, relfile )
import FPath.ToDir             ( toDir )

-- fstat -------------------------------

import FStat  ( FileType( SymbolicLink ), FStat, ftype, sampleLStat0 )

-- lens --------------------------------

import Control.Lens.Getter  ( view )

-- log-plus ----------------------------

import Log  ( Log, logIOT )

-- logging-effect ----------------------

import Control.Monad.Log  ( MonadLog
                          , Severity( Debug, Informational, Notice, Warning ) )

-- mockio ------------------------------

import MockIO.DoMock  ( DoMock( DoMock, NoMock ), HasDoMock( doMock ) )

-- mockio-cmds-inetutils ---------------

import MockIO.Cmds.InetUtils.Hostname  ( hostname )

-- mockio-cmds-util-linux --------------

import MockIO.Cmds.UtilLinux.FindMnt  ( FindMntData, FindMntDatum, filesystems
                                      , findmnt, findMntSource, sourceDevice )
import MockIO.Cmds.UtilLinux.Mount    ( mounts )
import MockIO.Cmds.UtilLinux.Umount   ( umounts )

-- mockio-cmds-util-rsync --------------

import MockIO.Cmds.RSync.RSync ( RSyncDeleteOpt( RSYNC_DELETE_BEFORE )
                               , RSyncOpt( RSYNC_VERBOSE, RSYNC_DELETE
                                         , RSYNC_PRESERVE_HARD_LINKS
                                         , RSYNC_PRESERVE_PARTIAL_TRANSFERS
                                         , RSYNC_NO_CROSS_FS_BOUNDARY
                                         )
                               , RSyncUsageError
                               , rsyncArchive
                               )

-- mockio-log --------------------------

import MockIO.IOClass      ( HasIOClass )
import MockIO.Log          ( mkIOL, warnIO )
import MockIO.MockIOClass  ( MockIOClass )

-- mockio-plus -------------------------

import MockIO.Directory          ( lsdir )
import MockIO.File               ( resolvelink )

-- monaderror-io -----------------------

import MonadError.IO.Error  ( IOError )

-- monadio-plus ------------------------

import MonadIO.Base                   ( getArgs )
import MonadIO.FStat                  ( isDir )
import MonadIO.Error.CreateProcError  ( AsCreateProcError )
import MonadIO.Error.ProcExitError    ( AsProcExitError )

-- mtl ---------------------------------

import Control.Monad.Reader  ( MonadReader, ReaderT, runReaderT, withReaderT )

-- natural -----------------------------

import Natural  ( Two, two )

-- stdmain -----------------------------

import StdMain             ( stdMain_ )
import StdMain.ProcOutputParseError
                           ( AsProcOutputParseError, AsTextError, ScriptError
                           , “©,“©“© )
import StdMain.StdOptions  ( DryRunLevel, StdOptions
                           , dryRunLevel, dryRunNum )
import StdMain.UsageError  ( AsUsageError, throwUsage )

-- text --------------------------------

import qualified  Data.Text  as  Text
import Data.Text  ( drop, isPrefixOf )

-- unix --------------------------------

import System.Posix.User  ( getEffectiveUserID )

--------------------------------------------------------------------------------

{-| Flag to say whether this backup target needs an explicit mount or not. -}
data DoMount = DoMount | NoDoMount
  deriving (Eq,Show)

rsync_opts ‚à∑ Set.Set RSyncOpt
rsync_opts = Set.fromList [ RSYNC_VERBOSE, RSYNC_PRESERVE_HARD_LINKS
                          , RSYNC_PRESERVE_PARTIAL_TRANSFERS
                          , RSYNC_NO_CROSS_FS_BOUNDARY
                          , RSYNC_DELETE RSYNC_DELETE_BEFORE
                          ]

by_partlabel ‚à∑ AbsDir
by_partlabel = [absdir|/dev/disk/by-partlabel/|]

name_repls ‚à∑ Map.Map ùïã ùïã
name_repls = -- values must parse as a valid `PathComponent`
             Map.fromList [ ("EFI\\x20system\\x20partition", "efi")
                          , ("EFI\\x5cx20system\\x5cx20partition", "efi")
                          , ("swap", "NOMOUNT")
                          , ("c-archive3", "archive3")
                          , ("arch0", "archive0")
                          ]


name_repl ‚à∑ ùïã ‚Üí ùïã
name_repl k = fromMaybe k $ name_repls !? k

------------------------------------------------------------

{-| Drop a prefix from the left (beginning) of some ùïã, no-op if prefix not
    present. -}
stripL ‚à∑ ùïã ‚Üí ùïã ‚Üí ùïã
stripL p t = if p `isPrefixOf` t then drop (Text.length p) t else t

----------------------------------------

{-| Given a MockIO action with a DoMock qualifier, transform it to a MockIO
    action which effects at DryRunLevel 0 (only) (otherwise mocks). -}
Íôü ‚à∑ ‚àÄ Œ± ŒΩ Œ∑ . ReaderT DoMock Œ∑ Œ±  ‚Üí ReaderT (DryRunLevel ŒΩ) Œ∑ Œ±
Íôü = withReaderT $ \ drl ‚Üí if 0 < dryRunNum drl then DoMock else NoMock

{-| Given a MockIO action with a DoMock qualifier, transform it to a MockIO
    action which effects at DryRunLevel 0 or 1 (otherwise mocks). -}
ÍôüÍôü ‚à∑ ‚àÄ Œ± ŒΩ Œ∑ . ReaderT DoMock Œ∑ Œ±  ‚Üí ReaderT (DryRunLevel ŒΩ) Œ∑ Œ±
ÍôüÍôü = withReaderT $ \ drl ‚Üí if 1 < dryRunNum drl then DoMock else NoMock

----------------------------------------

{-| Specialization of `lsdir`, with a configurable mock value; and
    warn of any errors (but otherwise carrying on). -}
lsDirWithMockData ‚à∑ ‚àÄ Œµ œâ œÉ Œº .
                    (MonadIO Œº,
                     AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº,
                     MonadReader œÉ Œº, HasDoMock œÉ,
                     Default œâ, HasIOClass œâ, HasDoMock œâ, MonadLog (Log œâ) Œº) ‚áí
                    ([(AbsFile,FStat)],[(AbsDir,FStat)],[(AbsFile, IOError)])
                  ‚Üí AbsDir
                  ‚Üí Œº [(AbsFile, FStat)]
lsDirWithMockData mock_data d = do
  do_mock ‚Üê view doMock
  (fs,_,es) ‚Üê lsdir @_ @IOError Informational mock_data d do_mock
  forM_ es $ \ (f,e) ‚Üí
    -- like `MockIO.Log.warnIO`; but not a fixed MockIOClass to Log
    mkIOL Warning def ([fmtT|lsdir: '%T' ! %T|] f e) () (return ()) do_mock
  return fs

----------------------------------------

{-| Specialization of `lsdir`, to provide a usable mock value (@d/file@); and
    warn of any errors (but otherwise carrying on). -}
lsDir ‚à∑ ‚àÄ Œµ œâ œÉ Œº .
        (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº,
         MonadReader œÉ Œº, HasDoMock œÉ,
         Default œâ, HasIOClass œâ, HasDoMock œâ, MonadLog (Log œâ) Œº) ‚áí
        AbsDir ‚Üí Œº [(AbsFile, FStat)]
lsDir d = lsDirWithMockData ([(d ‚´ª [relfile|root|],sampleLStat0)],[],[]) d

----------------------------------------

mountSources ‚à∑ ‚àÄ Œµ œâ Œº . (MonadIO Œº, MonadLog (Log œâ) Œº, Default œâ,
                          AsFPathError Œµ, AsIOError Œµ, MonadError Œµ Œº) ‚áí
               FindMntData ‚Üí Œº (Map.Map Abs [FindMntDatum])
mountSources d = do
  let mx _ ùïπ     = ùïπ
      mx x (ùïµ y) = ùïµ (y,x)
      go = catMaybes ‚ä≥ forM (d ‚ä£ filesystems) (\ x‚Üí mx x ‚ä≥ sourceDevice x)
      result = fmap (Map.fromListWith (‚äï)) ‚àò fmap (fmap (second pure)) $ go

  logIOT Debug ("hello" ‚à∑ ùïã)
  result


----------------------------------------

{-| Given the output of @findmnt@, and a file representing a device (by
    partition label); return a backup target directory, if there is one; along
    with a flag to say whether it needs explicitly mounting for the purposes of
    backup.
-}
findBackupTarget ‚à∑ ‚àÄ Œµ Œº .
                   (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                    AsFPathError Œµ, AsIOError Œµ, AsTextError Œµ, Printable Œµ,
                    MonadError Œµ Œº) ‚áí
                   Hostname ‚Üí FindMntData ‚Üí AbsFile ‚Üí FStat
                 ‚Üí Œº (ùïÑ (AbsDir,DoMount))
findBackupTarget hstnm mntdata file (ftype ‚Üí SymbolicLink) =
  logIOT Debug "findBackupTarget"  ‚™º
  let -- readlink, no mocking (so mock value of / is irrelevant), log@Info
      resolve_link f = resolvelink Informational (AbsD root) f NoMock
      name = toText $ basename file
   in -- nasty hack to allow for non-standard nvme partition names on night
      if "night-a-" `isPrefixOf` name
      then return ùïπ
      else do
        dev ‚Üê resolve_link file
        mntSrcs ‚Üê mountSources mntdata
        let nme = name_repl $ stripL (toText (hostlocal hstnm) ‚äï "-") name
-- XXX findMntSourceResolveLinks or similar
            do_mount' = maybe DoMount (const NoDoMount)
                             (findMntSource mntdata (toText dev))
            do_mount = bool DoMount NoDoMount $ dev `Map.member` mntSrcs
         in if "NOMOUNT" ‚â¢ nme
            then do
              -- we don't handle an error in this parse, because
              -- nme is a contraction or replacement of name, which
              -- is a basename; so parsing as a `RelFile`
              -- should never fail (so long as the replacements are
              -- valid).
              nme_pc ‚Üê parse @RelFile nme
              let mnt_targ ‚à∑ AbsFile -- [absdir|/mnt/|] ‚´ª nme_pc
                  mnt_targ = [absdir|/mnt/|] ‚´ª nme_pc
              isDir mnt_targ ‚â´ \ case
                ùïø ‚Üí return ‚àò ùïµ $ (toDir mnt_targ, do_mount)
                ùï± ‚Üí “© $ [fmt|No such mount dir: %T|] mnt_targ
            else return ùïπ

-- We're only interested in symlinks (which everything in /dev/disk/by-partlabel
-- should be)
findBackupTarget _ _ _ _ = return ùïπ

----------------------------------------

{-| Given the output of @findmnt@, and a list of devices (by partition label);
    identify which devices need to be specially mounted to write backups to.

    The result is given as a map from device file name to mount target
    directory.
-}
findBackupTargets ‚à∑ ‚àÄ Œµ Œº .
                    (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                     AsFPathError Œµ, AsIOError Œµ, AsTextError Œµ, Printable Œµ,
                     MonadError Œµ Œº) ‚áí
                    Hostname ‚Üí FindMntData ‚Üí [(AbsFile, FStat)]
                  ‚Üí Œº (Map.Map AbsFile (AbsDir,DoMount))

findBackupTargets hstnm mntdata files_and_stats =
  let mnts =
        sequence [ (file,) ‚ä≥ findBackupTarget hstnm mntdata file stat |
                   (file,stat) ‚Üê files_and_stats ]
   in (Map.map fromJust ‚àò Map.fromList ‚àò filter (isJust ‚àò snd) ) ‚ä≥ mnts

----------------------------------------

{-| Work out the src directory for an rsync; special rules apply for @/root@, and
    @/boot/efi@. -}
-- XXX use quotePat here
srcFudge ‚à∑ RelDir ‚Üí RelDir
srcFudge ((‚â° [reldir|root/|]) ‚Üí ùïø) = [reldir|./|]
srcFudge ((‚â° [reldir|efi/|])  ‚Üí ùïø) = [reldir|boot/efi/|]
srcFudge d                           = d

----------------------------------------

type MonadIOClassLog Œ∑ = MonadLog (Log MockIOClass) Œ∑

{-| Check that we're running as the root user; else throw.  In mock mode,
    Issues a warning (with @warnIO@), and does not throw. -}
checkIsRoot ‚à∑ ‚àÄ Œº œÉ Œµ .
              (MonadIO Œº, MonadReader œÉ Œº, HasDoMock œÉ,
               MonadIOClassLog Œº, AsUsageError Œµ, MonadError Œµ Œº) ‚áí Œº ()

checkIsRoot = do
  euid ‚Üê liftIO $ getEffectiveUserID
  case euid of
    0 ‚Üí return ()
    _ ‚Üí view doMock ‚â´ \ case
          NoMock ‚Üí throwUsage ("this must be run as root"‚à∑ùïã)
          DoMock ‚Üí warnIO DoMock ("not root: would not continue"‚à∑ùïã)

----------------------------------------

doMain ‚à∑ ‚àÄ Œµ Œº .
         (MonadIO Œº, MonadMask Œº,
          AsProcExitError Œµ, AsProcOutputParseError Œµ, AsCreateProcError Œµ,
          AsFPathError Œµ, AsIOError Œµ, AsTextError Œµ, AsUsageError Œµ,
          Printable Œµ, MonadError Œµ Œº, HasCallStack,
          MonadLog (Log MockIOClass) Œº) ‚áí
         StdOptions Two () ‚Üí Œº Word8
doMain opts = flip runReaderT (opts ‚ä£ dryRunLevel) $ do
  Íôü checkIsRoot

  h            ‚Üê ÍôüÍôü $ hostname Notice
  findmnt_data ‚Üê ÍôüÍôü $ findmnt Notice
  partitions   ‚Üê ÍôüÍôü $ lsDir by_partlabel

  let host_prefix = toText (hostlocal h) ‚äï "-"
      is_host_prefixed ‚à∑ (AbsFile,œâ) ‚Üí ùîπ
      is_host_prefixed (f,_) = host_prefix `isPrefixOf` toText (basename f)

  tgts ‚Üê findBackupTargets h findmnt_data (filter is_host_prefixed partitions)

  let mnts = Map.map fst $ Map.filter (\ (_,m) ‚Üí m ‚â° DoMount) tgts
  bracket_ (Íôü $ mounts Warning (Map.toList mnts)) (Íôü $ umounts Warning mnts) $
    forM_ tgts $ \ (tgt,_) ‚Üí do
      let src ‚à∑ AbsDir
          src = root ‚´ª srcFudge (basename tgt)
      Íôü ‚àò join ‚àò “©“© $ rsyncArchive @RSyncUsageError Warning rsync_opts (src,tgt)
      return (0‚à∑‚Ñ§)
  return 0

----------------------------------------

main ‚à∑ MonadIO Œº ‚áí Œº ()
main = let desc = "back up filesystems to pre-partitioned external disk"
        in getArgs ‚â´ stdMain_ @ScriptError two desc (pure ()) doMain

-- that's all, folks! ----------------------------------------------------------
